[transmogrifier]
pipeline =
  data
  condition
  relateditems
  dates
  set_image
  set_file
  upload
  set_body_mimetype
  schema
  wfupdate
#  breaker
#  logger


[config]
json_file = /Users/giorgio/sviluppo/ploneit/old_ploneit/data/export_contents.json
destination_url = http://admin:admin@localhost:8081/ploneit
origin_url = http://giorgio:giorgio@localhost:8080/ploneit


[condition]
blueprint = collective.transmogrifier.sections.condition
condition = python:item['_type'] in ('Folder', 'Image', 'News Item', 'Document') and 'scopri-old' not in item['_path'] and 'scopri-nuove-icone' not in item['_path']


[set_body_mimetype]
blueprint = collective.transmogrifier.sections.inserter
key = string:_mimetype
value=python:'text/html'
condition=python:item.get('text')


[set_image]
blueprint = collective.transmogrifier.sections.inserter
key = string:image
value=python:modules['ploneit'].blueprint.get_file('${config:origin_url}', item['image'])
condition=python:item.get('image')


[set_file]
blueprint = collective.transmogrifier.sections.inserter
key = string:file
value=python:modules['ploneit'].blueprint.get_file('${config:origin_url}', item['file'])
condition=python:item.get('file')


[wfupdate]
blueprint = transmogrify.ploneremote.remoteworkflowupdater
target = ${config:destination_url}
condition = python:item['_type'] not in  ('Image', 'File')


[breaker]
blueprint = collective.transmogrifier.sections.breakpoint
condition = python: item.get('id') == 'front-page'


[data]
blueprint = ploneit.blueprint.jsonimport
filename = ${config:json_file}
keys_to_date = python:('creation_date', 'expirationDate', 'modification_date', 'effectiveDate')


[relateditems]
blueprint = collective.transmogrifier.sections.manipulator
delete = relatedItems


[dates]
blueprint = collective.transmogrifier.sections.manipulator
keys = re:([^-]+)_date$
destination = python:match.group(1) + 'Date'
delete = ${dates:keys}


[upload]
blueprint = transmogrify.ploneremote.remoteconstructor
target = ${config:destination_url}


[schema]
blueprint = transmogrify.ploneremote.remoteschemaupdater
target = ${config:destination_url}

[logger]
blueprint = collective.transmogrifier.sections.logger
level = 1
name = logger
key = _path
